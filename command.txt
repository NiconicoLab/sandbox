■ mainという名前のブランチを作成する
git branch main

■ mainという名前のブランチを作成し，そのブランチへ切り替える
git checkout -b main master :masterブランチからmainブランチを作成
git checkout -b main :今いるブランチから作成する場合は省略可能

■ remoteへ反映させる(1回目のみ-uが必須となる)
git push -u origin HEAD
git push -u origin main :こちらでもOK

■ remoteの情報をfetch & mergeする
git pull origin master :masterブランチにおける実行例
# git pull相当を別コマンドで行う
git fetch
git merge origin/master

■ README.mdというファイルを削除する
git rm README.md

■ リモート(origin)の情報を取得
git fetch origin
git fetch origin master :masterブランチのみ取得
git fetch --all :originに限らずリモートの全てのブランチ情報を取得
git fetch :省略した場合はgit fetch originと同じ意味

■ パッチファイル
- パターン1 
git diff --no-prefix > diff.patch
patch -p0 < diff.patch

- パターン2
git diff > diff.patch
patch -p1 < diff.patch

- パターン3
git format-patch -o patch 12345 #12345からのHEAD までのコミット
git am diff.patch
git am -3 diff.patch #-3オプションにより修正されたファイルに対してパッチを適用

- パターン3の別例
git format-patch -1 #"-1"オプションをつけることで最新一個分のパッチに指定可能
git format-patch -3 tmp.txt #最新からのパッチ個数だけでなく，ファイル名も指定可能

■ ブランチをマージする(workブランチへmainブランチの内容を反映させる)
# mainブランチへ切り替え，mainブランチの変更を行う
git checkout main
git add sample.txt
git commit -m "add sample.txt"
git push origin HEAD
# workブランチへ切り替える
git checkout work
# マージ作業
git merge main

■ コミット取り消し
# ローカルの変更も戻す
git reset --hard HEAD^
# ローカルの変更とステージングは戻さない
git reset --soft HEAD^
# ローカルの変更などは変更せずに複数のコミットを取り消す
git reset --soft HEAD~2

■ コミットメッセージを修正する
git commit --amend

■ コミットのログのグラフを表示する
git log --graph --oneline --decorate=full

■ フォルダ構成/追跡を変更せずファイル/ディレトリ名を変更
git mv file1 file2
git mv directory1 directory2

■ 現在どんなURLでcloneしたか確認する
git remote -v

■ 追跡されていないファイルを表示
git ls-files --others --exclude-standard
--exclude-standardのオプションは.gitignoreで無視されているファイルは除外
